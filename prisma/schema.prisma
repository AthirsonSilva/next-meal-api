generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ratings {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  date       DateTime  @db.Date
  rating     Int
  comment    String    @db.VarChar(255)
  restaurant Int
  client     Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model clients {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  name         String         @db.VarChar(60)
  cpf          String         @unique(map: "clients_cpf_unique") @db.Char(11)
  password     String         @db.VarChar(60)
  email        String         @unique(map: "clients_email_unique") @db.VarChar(100)
  phone        String         @unique(map: "clients_telefone_unique") @db.VarChar(30)
  photo        String         @db.VarChar(255)
  created_at   DateTime?      @default(now()) @db.Timestamp(0)
  updated_at   DateTime?      @default(now()) @db.Timestamp(0)
  reservations reservations[]
}

model desks {
  id                Int         @id @default(autoincrement()) @db.UnsignedInt
  seats_quantity    Int
  occupation_status Int
  number            Int
  restaurant        Int         @map("restaurant") @db.UnsignedInt
  created_at        DateTime?   @db.Timestamp(0)
  updated_at        DateTime?   @db.Timestamp(0)
  restaurants       restaurants @relation(fields: [restaurant], references: [id], onUpdate: Restrict, map: "desks_restaurant_foreign")

  @@index([restaurant], map: "desks_restaurant_foreign")
}

model meals {
  id          Int         @id @default(autoincrement()) @map("idPrato") @db.UnsignedInt
  name        String      @db.VarChar(60)
  price       Decimal     @db.Decimal(6, 2)
  ingredients String      @db.VarChar(100)
  culinary    Int         @db.UnsignedInt
  restaurant  Int         @db.UnsignedInt
  created_at  DateTime?   @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  photo       String      @db.VarChar(255)
  restaurants restaurants @relation(fields: [restaurant], references: [id], onUpdate: Restrict, map: "meals_restaurant_foreign")
  cullinaries culinary    @relation(fields: [culinary], references: [id], onUpdate: Restrict, map: "meals_culinary_foreign")

  @@index([culinary], map: "meals_culinary_foreign")
  @@index([restaurant], map: "meals_restaurant_foreign")
}

model reservations {
  id              Int         @id @default(autoincrement()) @db.UnsignedInt
  date            DateTime    @db.Date
  hour            DateTime    @db.Time(0)
  people_quantity Int
  client          Int         @db.UnsignedInt
  restaurant      Int         @db.UnsignedInt
  status          Int         @db.UnsignedInt
  created_at      DateTime?   @db.Timestamp(0)
  updated_at      DateTime?   @db.Timestamp(0)
  clients         clients     @relation(fields: [client], references: [id], onUpdate: Restrict, map: "reservations_client_foreign")
  restaurants     restaurants @relation(fields: [restaurant], references: [id], onUpdate: Restrict, map: "reservations_restaurant_foreign")
  statuses        statuses    @relation(fields: [status], references: [id], onUpdate: Restrict, map: "reservations_status_foreign")

  @@index([client], map: "reservations_client_foreign")
  @@index([restaurant], map: "reservations_restaurant_foreign")
  @@index([status], map: "reservations_status_foreign")
}

model restaurants {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  name         String         @unique @db.VarChar(300)
  cnpj         String         @db.Char(14)
  phone        String         @db.VarChar(30)
  password     String         @db.VarChar(255)
  photo        String         @db.VarChar(255)
  email        String         @unique @db.VarChar(100)
  opening_time DateTime       @db.Time(0)
  closing_time DateTime       @db.Time(0)
  capacity     Int
  is_full      Boolean
  description  String         @db.VarChar(1000)
  kitchen      Int            @db.UnsignedInt
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  addresses    addresses[]
  desks        desks[]
  meals        meals[]
  reservations reservations[]
  kitchens     kitchens       @relation(fields: [kitchen], references: [id], onUpdate: Restrict, map: "restaurants_kitchen_foreign")

  @@index([kitchen], map: "restaurants_kitchen_foreign")
}

model addresses {
  id           Int         @id @default(autoincrement()) @db.UnsignedInt
  cep          String      @db.VarChar(40)
  street       String      @db.VarChar(100)
  neighborhood String      @db.VarChar(100)
  restaurant   Int         @db.UnsignedInt
  city         String      @db.VarChar(100)
  state        String      @db.VarChar(40)
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  restaurants  restaurants @relation(fields: [restaurant], references: [id], onUpdate: Restrict, map: "addresses_restaurant_foreign")

  @@index([restaurant], map: "addresses_restaurant_foreign")
}

model statuses {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  status       String         @unique @db.VarChar(255)
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  reservations reservations[]
}

model culinary {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  culinary   String    @unique @db.VarChar(20)
  photo      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  meals      meals[]
}

model kitchens {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  kitchen     String        @unique @db.VarChar(40)
  created_at  DateTime?     @db.Timestamp(0)
  photo       String        @db.VarChar(255)
  updated_at  DateTime?     @db.Timestamp(0)
  restaurants restaurants[]
}
